name: 'technosweb'
services:
  redis:
    image: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/var/lib/redis/data
    environment:
      - REDIS_DB=${REDIS_DB}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - technosweb_net

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Paris
      - PGTZ=Europe/Paris
    restart: unless-stopped
    networks:
      - technosweb_net

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nest-api
    command: sh -c "/wait && npm run start:prod"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=postgres    # We need to force the host value here.
      - POSTGRES_DB=${POSTGRES_DB}
      - API_SERVER_PORT=${API_SERVER_PORT}
      - JWT_AUTH_TOKEN_SECRET_KEY=${JWT_AUTH_TOKEN_SECRET_KEY}
      - JWT_REFRESH_TOKEN_SECRET_KEY=${JWT_REFRESH_TOKEN_SECRET_KEY}
      - AUTH_TOKEN_EXPIRE=${AUTH_TOKEN_EXPIRE}
      - REFRESH_TOKEN_EXPIRE=${REFRESH_TOKEN_EXPIRE}
      - WAIT_HOSTS=postgres:${POSTGRES_PORT}, redis:${REDIS_PORT}
      - WAIT_HOSTS_TIMEOUT=300
      - WAIT_SLEEP_INTERVAL=1
      - WAIT_HOST_CONNECT_TIMEOUT=30
    ports:
      - '3000:3000'
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
    networks:
      - technosweb_net

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${POSTGRES_USER}@test.com
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '8080:8080'
    depends_on:
      - postgres
    networks:
      - technosweb_net

volumes:
  postgres_data:
  redis_data:

networks:
  technosweb_net:
    driver: bridge
